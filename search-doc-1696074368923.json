[{"title":"Stater","type":0,"sectionRef":"#","url":"/Stater/api/Stater","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Stater","url":"/Stater/api/Stater#types","content":" "},{"title":"State​","type":1,"pageTitle":"Stater","url":"/Stater/api/Stater#State","content":"&lt;/&gt; type State = (Stater) → boolean?  "},{"title":"Functions​","type":1,"pageTitle":"Stater","url":"/Stater/api/Stater#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Stater","url":"/Stater/api/Stater#new","content":"&lt;/&gt; Stater.new( States: {[string]: State},-- The Table that will have all the States Tick: number?,-- Optional tick to be set. Return: any?-- Determines what to return in the first parameter of each state. ) → Stater "},{"title":"Types","type":1,"pageTitle":"Stater","url":"/Stater/api/Stater##","content":""},{"title":"​","type":1,"pageTitle":"Stater","url":"/Stater/api/Stater#Stater","content":"interface Stater { States: {[string]: State}-- The Provided States Table, if theres a &quot;Init&quot; state then that function will execute each time the Stater Starts. Info: {any?}-- A table that you can add anything in, this is more recommended than directly inserting variables inside the object. Tick: number?-- The time it takes for the current state to be called again after a function is done. Default is 0 Return: any-- This is the thing that returns as the first parameter of every single state. Default is the Stater object itself. State: State-- The current state that the Stater is on. StateConfirmation: boolean-- If this is enabled, the state MUST return a boolean indicating if the function ran properly. Changed: Signal | RBXScriptSignal -- A signal that fires whenever the State changes. Returns Current State and Previous State StatusChanged: Signal | RBXScriptSignal -- Fired whenever the Stater starts or closes. Returns the current status as a boolean. StateRemoved: Signal | RBXScriptSignal -- A signal that fires whenever a state is added via the Stater:AddState() method. Returns the State Name. StateAdded: Signal | RBXScriptSignal -- A signal that fires whenever a state is removed via the Stater:RemoveState() method. Returns the State Name. }  Returns a new Stater Object. "},{"title":"Errors","type":1,"pageTitle":"Stater","url":"/Stater/api/Stater##","content":"Type\tDescription&quot;No States&quot;\tHappens when no States are provided  "},{"title":"RemoveState​","type":1,"pageTitle":"Stater","url":"/Stater/api/Stater#RemoveState","content":"&lt;/&gt; Stater:RemoveState( Name: string-- The name of the removing state. ) → () Removes a state inside the states table.  "},{"title":"AddState​","type":1,"pageTitle":"Stater","url":"/Stater/api/Stater#AddState","content":"&lt;/&gt; Stater:AddState( Name: string,-- The name that the state will go by. State: State-- The State function itself. ) → () Adds a state inside the states table. If there is a Start after the State name inside the States, that will play. If there is a End after the State name inside the States, that will play after the state changes. "},{"title":"Errors","type":1,"pageTitle":"Stater","url":"/Stater/api/Stater##","content":"Type\tDescription&quot;Existing State&quot;\tHappens when the name of the state is already inside the table.  "},{"title":"GetCurrentState​","type":1,"pageTitle":"Stater","url":"/Stater/api/Stater#GetCurrentState","content":"&lt;/&gt; Stater:GetCurrentState() → string | nil Returns the current state the Stater is on indicated by a string. If none then nil. This is currently the same as self.State.  "},{"title":"IsWorking​","type":1,"pageTitle":"Stater","url":"/Stater/api/Stater#IsWorking","content":"&lt;/&gt; Stater:IsWorking() → boolean Returns a boolean indicating if the State currently is on.  "},{"title":"SetState​","type":1,"pageTitle":"Stater","url":"/Stater/api/Stater#SetState","content":"&lt;/&gt; Stater:SetState( State: string-- The function name inside States represented by a string ) → () Returns a boolean indicating if the State currently is on. "},{"title":"Errors","type":1,"pageTitle":"Stater","url":"/Stater/api/Stater##","content":"Type\tDescription&quot;No State&quot;\tHappens when no State is provided. &quot;Invalid State&quot;\tHappens when the state provided doesn't exist.  "},{"title":"Start​","type":1,"pageTitle":"Stater","url":"/Stater/api/Stater#Start","content":"&lt;/&gt; Stater:Start( State: string-- The function name inside States represented by a string, this state will be set at the start. ) → () Begins the Stater "},{"title":"Errors","type":1,"pageTitle":"Stater","url":"/Stater/api/Stater##","content":"Type\tDescription&quot;No State&quot;\tHappens when no State is provided. &quot;Already Started&quot;\tHappens when the Stater has already started.  "},{"title":"Stop​","type":1,"pageTitle":"Stater","url":"/Stater/api/Stater#Stop","content":"&lt;/&gt; Stater:Stop() → () Stops the stater and its state. "},{"title":"Errors","type":1,"pageTitle":"Stater","url":"/Stater/api/Stater##","content":"Type\tDescription&quot;Already Stopped&quot;\tHappens when the Stater has already been stopped.  "},{"title":"Destroy​","type":1,"pageTitle":"Stater","url":"/Stater/api/Stater#Destroy","content":"&lt;/&gt; Stater:Destroy() → () Gets rid of the Stater Object. "}]