"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[521],{87303:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Returns a new Stater Object.","params":[{"name":"States","desc":"The Table that will have all the States","lua_type":"{(self) -> ()}"},{"name":"Tick","desc":"Optional tick to be set.","lua_type":"number?"},{"name":"Instance","desc":"Optional model to be set.","lua_type":"Model?"}],"returns":[{"desc":"","lua_type":"Stater\\r\\n"}],"function_type":"static","errors":[{"lua_type":"\\"No States\\"","desc":"Happens when no States are provided"}],"source":{"line":54,"path":"src/init.lua"}},{"name":"IsWorking","desc":"Returns a boolean indicating if the State currently is on.","params":[],"returns":[{"desc":"","lua_type":"boolean\\r\\n"}],"function_type":"method","source":{"line":80,"path":"src/init.lua"}},{"name":"SetState","desc":"Returns a boolean indicating if the State currently is on.","params":[{"name":"State","desc":"The function name inside States represented by a string","lua_type":"string"}],"returns":[],"function_type":"method","errors":[{"lua_type":"\\"No State\\"","desc":"Happens when no State is provided."},{"lua_type":"\\"Invalid State\\"","desc":"Happens when the state provided doesn\'t exist."}],"source":{"line":91,"path":"src/init.lua"}},{"name":"Start","desc":"Begins the Stater","params":[{"name":"State","desc":"The function name inside States represented by a string, this state will be set at the start.","lua_type":"string"}],"returns":[],"function_type":"method","errors":[{"lua_type":"\\"No State\\"","desc":"Happens when no State is provided."},{"lua_type":"\\"Already Started\\"","desc":"Happens when the Stater has already started."}],"source":{"line":116,"path":"src/init.lua"}},{"name":"Stop","desc":"Stops the stater and its state.","params":[],"returns":[],"function_type":"method","errors":[{"lua_type":"\\"Already Stopped\\"","desc":"Happens when the Stater has already been stopped."}],"source":{"line":145,"path":"src/init.lua"}},{"name":"Destroy","desc":"Gets rid of the Stater Object.","params":[],"returns":[],"function_type":"method","source":{"line":156,"path":"src/init.lua"}}],"properties":[],"types":[{"name":"Stater","desc":"","fields":[{"name":"States","lua_type":"{(self) -> ()}","desc":"The Provided States Table, if theres a \\"Init\\" state then that function will execute each time the Stater Starts."},{"name":"Info","lua_type":"{any?}","desc":"A table that you can add anything in, this is more recommended than directly inserting variables inside the object."},{"name":"Tick","lua_type":"number?","desc":"The time it takes for the current state to be called again after a function is done. Default is 0"},{"name":"Instance","lua_type":"Model?","desc":"Optional model for when you don\'t want to do self.Info.Instance. Default is nil."},{"name":"State","lua_type":"(self) -> boolean?","desc":"The current state that the Stater is on."},{"name":"Changed","lua_type":"Signal | RBXScriptSignal","desc":"A signal that fires whenever the State changes."}],"source":{"line":30,"path":"src/init.lua"}}],"name":"Stater","desc":"Stater is a finite state machine module with the purpose of easing the creation of ai and npcs in games,\\nStater was built with the intent of being used in module scripts.","source":{"line":16,"path":"src/init.lua"}}')}}]);