return function()
    local Stater = require(script.Parent)
    local StaterObject = Stater.new({
        ["Hi"] = function(self)
            print("Hello.")
        end
    })

    describe("Construct", function()
        it("Should Construct a Stater Object", function()
            expect(getmetatable(StaterObject)).to.equal(Stater)
        end)
    end)

    describe("IsWorking", function()
        it("Should Return the state of the StaterObject", function()
            expect(StaterObject:IsWorking()).to.equal(false)
        end)
    end)

    describe("Start", function()
        it("Should Start the State", function()
            expect(function() 
                StaterObject:Start("Hi")
            end).never.to.throw()
            expect(StaterObject.State).to.be.ok()
        end)
    end)

    describe("Switch", function()
        it("Should Switch the State", function()
            expect(function()
                 StaterObject:SetState("Hi")
            end).never.to.throw()
            expect(StaterObject.State).to.equal(StaterObject.States.Hi)
        end)
    end)

    describe("Stop", function()
        it("Should Stop the State", function()
            expect(function()
                StaterObject:Stop()
            end).never.to.throw()
            expect(StaterObject._Connections.Main).never.to.be.ok()
        end)
    end)

    describe("Destroy", function()
        it("Should Destroy the Stater Object", function()
            expect(function()
                StaterObject:Destroy()
            end).never.to.throw()
        end)
    end)
end